package com.kinde.client.oidc;

import com.google.inject.Inject;
import com.kinde.client.OidcMetaData;
import com.kinde.token.TestKeyGenerator;

import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.oauth2.sdk.auth.ClientAuthenticationMethod;
import com.nimbusds.oauth2.sdk.id.Issuer;
import com.nimbusds.openid.connect.sdk.SubjectType;
import com.nimbusds.openid.connect.sdk.claims.ClaimType;
import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;
import lombok.SneakyThrows;

import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Arrays;

public class OidcMetaDataTestImpl implements OidcMetaData {

    private TestKeyGenerator testKeyGenerator;
    private Path jwksPath;
    private OIDCProviderMetadata opMetadata;

    @Inject
    public OidcMetaDataTestImpl(TestKeyGenerator testKeyGenerator) {
        this.testKeyGenerator = testKeyGenerator;
        this.jwksPath = testKeyGenerator.regenerateKey();
        this.opMetadata = createMockOIDCProviderMetadata();
    }

    @SneakyThrows
    private OIDCProviderMetadata createMockOIDCProviderMetadata() {
        // Create a mock OIDC provider metadata for testing
        // Use localhost:8089 to match the wiremock server used in tests
        Issuer issuer = new Issuer("http://localhost:8089");
        
        // Create metadata with required parameters
        OIDCProviderMetadata metadata = new OIDCProviderMetadata(
            issuer,
            Arrays.asList(SubjectType.PUBLIC),
            URI.create("http://localhost:8089/oauth2/auth")
        );
        
        // Explicitly set the authorization endpoint
        metadata.setAuthorizationEndpointURI(URI.create("http://localhost:8089/oauth2/auth"));
        
        // Set additional endpoints
        metadata.setTokenEndpointURI(URI.create("http://localhost:8089/oauth2/token"));
        metadata.setEndSessionEndpointURI(URI.create("http://localhost:8089/logout"));
        metadata.setJWKSetURI(jwksPath.toUri()); // Use the actual JWKS file generated by TestKeyGenerator
        metadata.setUserInfoEndpointURI(URI.create("http://localhost:8089/oauth2/v2/user_profile"));
        
        // Set algorithms and methods
        metadata.setIDTokenJWSAlgs(Arrays.asList(JWSAlgorithm.RS256));
        metadata.setUserInfoJWSAlgs(Arrays.asList(JWSAlgorithm.RS256));
        metadata.setRequestObjectJWSAlgs(Arrays.asList(JWSAlgorithm.RS256));
        metadata.setTokenEndpointAuthMethods(Arrays.asList(ClientAuthenticationMethod.CLIENT_SECRET_BASIC));
        
        // Set claims
        metadata.setClaims(Arrays.asList("sub", "name", "email"));
        metadata.setClaimTypes(Arrays.asList(ClaimType.NORMAL));
        
        // Set service URIs
        metadata.setServiceDocsURI(URI.create("http://localhost:8089/docs"));
        metadata.setPolicyURI(URI.create("http://localhost:8089/policy"));
        metadata.setTermsOfServiceURI(URI.create("http://localhost:8089/terms"));
        
        return metadata;
    }

    @Override
    public OIDCProviderMetadata getOpMetadata() {
        return opMetadata;
    }

    @Override
    @SneakyThrows
    public URL getJwkUrl() {
        return jwksPath.toUri().toURL();
    }
}
